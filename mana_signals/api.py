# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_api.ipynb.

# %% auto 0
__all__ = ['RModel', 'RValue', 'RInput']

# %% ../nbs/01_api.ipynb 42
class RModel(): 
    "Reactive model defines global calculation timer"
    ts: int # current time step of the calculation
    def __init__(self): self.ts = 0
    def step(self): 
        "Increases the timestep of the reactive model"
        self.ts += 1
    __repr__ = basic_repr('ts')
    

# %% ../nbs/01_api.ipynb 44
class RValue():
    __repr__ = basic_repr('cached_value,ts_checked,ts_updated,model')
    def __init__(self, model=singleton_model): 
        self.cached_value, self.ts_checked, self.ts_updated = (None, 0, 0)
        self.deps, self.model = None, model
    def set_model(self,model): 
        self.model = model
        for v in self.get_dependents(): v.set_model(model)

    def invalidate_if_outdated(self): 
        if self.ts_checked < self.model.ts: 
            dep_ts = [v.invalidate_if_outdated() for v in self.get_dependents()]
            max_dep_ts = max(dep_ts) if dep_ts else 0
            if self.ts_updated < max_dep_ts: 
                self.ts_updated = max_dep_ts
                self.cached_value = None
            self.ts_checked = self.model.ts
        return self.ts_updated
        
    def get_dependents(self): 
        if self.deps is None: 
            self.deps = [ v for (n,v) in self.__dict__.items() if isinstance(v,RValue)]
        return self.deps
        
    @property
    def value(self): 
        if self.model.ts > self.ts_checked :
            self.invalidate_if_outdated()
        if self.cached_value is None: self.cached_value = self.calc()
        return self.cached_value
  
    def calc(self): raise NotImplementedError('RValue.calc method must be overriden')



# %% ../nbs/01_api.ipynb 45
class RInput(RValue):
    def __init__(self, init_value): super().__init__(); self.cached_value = init_value
    def set_value(self, value): 
        self.model.step()
        self.ts_checked = self.ts_updated = self.model.ts
        self.cached_value = value
    def calc(self): raise NotImplementedError("Input value not provided")

