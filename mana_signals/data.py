# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_data.ipynb.

# %% auto 0
__all__ = ['load_market_data_file', 'get_symbols', 'load_all_market_data_files_for_symbol', 'make_sequential_stream']

# %% ../nbs/20_data.ipynb 3
import pandas as pd
import numpy as np
import sklearn.datasets as ds
import sklearn.model_selection as ms
import sklearn.ensemble as en
from sklearn import linear_model

from pathlib import Path
from fastcore.all import *

# %% ../nbs/20_data.ipynb 5
def load_market_data_file(market_data_file: Path # csv file to laod data from
    ) -> pd.DataFrame: # data frame with transactions
    """Loads a single market data file"""
    df = pd.read_csv(market_data_file, compression="gzip")
    df['date'] = pd.to_datetime(df.local_timestamp, unit='us')
    df.set_index('date', inplace=True)
    return df
    


# %% ../nbs/20_data.ipynb 6
def get_symbols(market_data_path: Path # directory with market data
               ) -> List[str]: # List of symbols that have market data available
    "Returns a list of all symbols available at given market data dump directory"
    def extract_symbol(p:Path): 
        return (p.name.split('.')[1])

    return list(set(map(extract_symbol, market_data_path.ls())))

# %% ../nbs/20_data.ipynb 7
def load_all_market_data_files_for_symbol(market_data_path: Path, # directory with market data
                symbol: str # name of the symbol
               ) -> pd.DataFrame : # dataframe with transactions 
    "Loads all data for the given symbol"
    result = None
    for file in market_data_path.glob(f"*.{symbol}.csv.gz"): 
        print(f'processing file {file}')
        df = load_market_data_file(file)
        result = df if result is None else pd.concat([result,df])
    return result.sort_index()
    

# %% ../nbs/20_data.ipynb 8
def make_sequential_stream(data_frames: List[pd.DataFrame] # frames with transacations
                          ) -> pd.DataFrame: # sequential streamX
    "Takes a dictionary of data frames and merges them together according to the timestamps (index)."
    r = pd.concat(data_frames)
    return r.sort_index()

