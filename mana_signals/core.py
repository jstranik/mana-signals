# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/15_core.ipynb.

# %% auto 0
__all__ = ['RDelay', 'RLastn', 'RMean', 'RLinRegression']

# %% ../nbs/15_core.ipynb 3
from .reactive import *
from fastcore.all import *
import numpy as np
from sklearn import linear_model

# %% ../nbs/15_core.ipynb 4
class RDelay(RValue):
    """Value shifted from the calculation by given delay"""
    def __init__(self, source:RValue,  # source value
                 delay_n:int=1 # amount of shift
                ): 
        super().__init__()
        store_attr();
        self.history = np.full(delay_n+1, np.nan)
    def calc(self): 
        self.history = np.roll(self.history, shift=1)
        self.history[0] = self.source.value
        return self.history[-1]
        
        

# %% ../nbs/15_core.ipynb 8
class RLastn(RValue): 
    """Last n values collected from the given source"""
    def __init__(self, source: RValue, # source value
                 n:int = 1, # number of values to collect
                 missing_val = np.nan # filler value for missing data
                ): 
        super().__init__()
        self.source,self.n = source,n
        self.lastn = np.full(n, missing_val)
    def calc(self): 
        self.lastn = np.roll(self.lastn, shift=1)
        self.lastn[0] = self.source.value
        return self.lastn

# %% ../nbs/15_core.ipynb 10
class RMean(RValue): 
    """Calculates mean of the last n values"""
    def __init__(self, source: RValue, # source value
                 n:int # number of values to calculate the mean
                ): 
        super().__init__()
        self.last = RLastn(source, n, missing_val=np.nan)
    def calc(self): return self.last.value.mean()

# %% ../nbs/15_core.ipynb 12
class RLinRegression(RValue): 
    """Calculates linear regression for the source
       xs and ys should be of the same length.
    """
    def __init__(self, xs: RValue, # xs independent values
                 ys:RValue # ys dependent values
                ):
        super().__init__()
        store_attr()
        self.model = linear_model.LinearRegression()
    def calc(self): 
        in_x = self.xs.value.reshape(-1,1)
        in_y = self.ys.value
        model.fit(in_x, in_y)
        return self.model

    def predict(self, x): 
        """Given x, predicts next value y based on linear regression"""
        v = self.value.predict(np.array([[x]]))
        return v[0]
